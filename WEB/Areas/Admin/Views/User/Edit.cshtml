@model WebModels.UserProfile
@{
    Layout = "~/Areas/Admin/Views/Shared/_LayoutEmpty.cshtml";
    string userTemp = "user" + Model.UserId;
}
    <style>
        .readonly {
            background-color: #eee !important;
        }
    </style>

@using (Html.BeginForm("Edit", "User", new { cUserName = ViewBag.cUserName, UserId = Model.UserId },
    FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal fix" }))
{
    @(Html.Kendo().TabStrip()
        .Name("tabstrip")
        .Items(tabstrip =>
        {
        tabstrip.Add().Text("Thông tin tài khoản")
                .Selected(true)
                .Content(@<text>

    <br />

    <div class="control-group">
        @Html.LabelFor(m => m.AccountType, new { @class = "control-label" })
        <div class="controls">
            @Html.DropDownListFor(m => m.AccountType,
                                      new SelectList(new List<SelectListItem>
                                      {
                                        new SelectListItem { Text="Admin", Value = AccountType.Admin.ToString() },
                                        new SelectListItem { Text="Facebook", Value = AccountType.Facebook.ToString() },
                                        new SelectListItem { Text="Google", Value = AccountType.Google.ToString()  },
                                        new SelectListItem { Text="Zalo", Value = AccountType.Zalo.ToString()  },
                                        new SelectListItem { Text="Other", Value = AccountType.Other.ToString()  }
                                      }, "Value", "Text"))
        </div>
    </div>

    @if (Model.AccountType == "Admin") {
        <div class="control-group">
            @Html.LabelFor(m => m.UserName, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(m => m.UserName, new { @class = "input-block-level readonly", @readonly = "readonly" })
                @Html.ValidationMessageFor(m => m.UserName)
            </div>
        </div>
    }
    else
    {
        <input type="hidden" name="UserName" value="@userTemp" />
        <div class="control-group">
            @Html.LabelFor(m => m.UserName, new { @class = "control-label" })
            <div class="controls">
               @Html.TextBoxFor(m => m.SocialNetworkId, new { @class = "input-block-level readonly", @readonly = "readonly" })
            </div>
        </div>

    }

     <div class="control-group">
        @Html.Label(WebModels.AccountResources.Role, new { @class = "control-label" })
        <div class="controls">
            <div style="width:99%;">
                @(Html.Kendo().MultiSelect()
                  .Name("roles")
                  .DataTextField("RoleName")
                  .DataValueField("RoleName")
                  .Placeholder("...")
                  .DataSource(source => {
                      source.Read(read =>
                      {
                          read.Action("GetRoles", "Role");
                      })
                      .ServerFiltering(false);
                  })
                  .Value(ViewBag.Roles)
                )
            </div>
        </div>
    </div>
    </text>);

        tabstrip.Add().Text("Thông tin cá nhân")
                .Content(@<text>
     <br />
      <div class="control-group">
        <label class="control-label">Club </label>
        <div class="controls">
            <div style="width:99%;">
                @(Html.Kendo().DropDownList()
                                  .Name("ClubId")
                                  .DataTextField("ClubName")
                                  .DataValueField("ID")
                                  .OptionLabel("------Chọn CLB-------")
                                  .DataSource(source => {
                                      source.Read(read =>
                                      {
                                          read.Action("GetClubs", "Club");
                                      })
                                      .ServerFiltering(false);
                                  })
            )
            </div>
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(m => m.SportType, new { @class = "control-label" })
        <div class="controls">
            @Html.DropDownListFor(
                                      m => m.SportType,
                                      new SelectList(new List<SelectListItem>
                        {
                new SelectListItem { Text="Tennis", Value = SportType.Tennis.ToString() },
                new SelectListItem { Text="Badminton", Value = SportType.Badminton.ToString() }
                        }, "Value", "Text")
                                      )
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(m => m.FullName, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(m => m.FullName, new { @class = "input-block-level" })
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(m => m.Email, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(m => m.Email, new { @class = "input-block-level" })
            @Html.ValidationMessageFor(m => m.Email)
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(m => m.Mobile, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(m => m.Mobile, new { @class = "input-block-level" })
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(m => m.Birthday, new { @class = "control-label" })
        <div class="controls">
           @(Html.Kendo().DatePickerFor(m=>m.Birthday)
          .Value(Model.Birthday)
          .HtmlAttributes(new { type = "text" })
          .Format("dd/MM/yyyy")
        )
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(m => m.Gender, new { @class = "control-label" })
        <div class="controls">
            @Html.DropDownListFor(
                                      m => m.Gender,
                                      new SelectList(new List<SelectListTemp>
                        {
                new SelectListTemp { Text="Male", Value = (int)Gender.Male },
                new SelectListTemp { Text="Female", Value = (int)Gender.Female },
                new SelectListTemp { Text="Other", Value = (int)Gender.Other }
                        }, "Value", "Text")
                                      )
        </div>
    </div>

    <div class="control-group">
        <label class="control-label"> Trạng thái </label>
        <div class="controls">
            @Html.DropDownListFor(
                                      m => m.IsActive,
                                      new SelectList(new List<SelectListTemp>
                        {
                new SelectListTemp { Text="Public", Value = (int)Status.Public },
                new SelectListTemp { Text="Private", Value = (int)Status.Private }

                        }, "Value", "Text")
                                      )
        </div>
    </div>
<div class="control-group">
        @Html.LabelFor(m => m.Avatar, new { @class = "control-label" })
        @Html.HiddenFor(m => m.Avatar, new { id = "hfavatar" })
        <div class="controls">
            <div class="fileupload fileupload-new" data-provides="fileupload">
                <div class="fileupload-new thumbnail" id="imgthumb" style="width: 120px; height: 100px;">
                    <img src='@String.Format("{0}", !string.IsNullOrEmpty(Model.Avatar) ? Model.Avatar : ApplicationService.NoImage)' />
                </div>
                <div class="fileupload-preview fileupload-exists thumbnail" style="max-width: 120px; max-height: 100px; line-height: 20px;"></div>
                <div>
                    <span class="btn btn-file"><span class="fileupload-new">Tải ảnh</span><span class="fileupload-exists">Tải ảnh</span><input type="file" name='image' /></span>
                    @*<a href="javascript:void(0);" class="btn fileupload-exists" data-dismiss="fileupload">Hủy</a>*@
                    @*@if (!string.IsNullOrEmpty(Model.Avatar))
                    {
                        <a href="javascript:void(0);" onclick="thumbprocess(this, 'imgthumb','@ApplicationService.NoImage');" class="btn">Xóa</a>
                        @Html.HiddenFor(m => m.Avatar, new { @url = Model.Avatar })
                    }*@
                </div>
            </div>
        </div>

    </div>
       </text>);
            })
    )

    <div class="validation-group">
        <div class="controls">
            @Html.ValidationSummary(true)
        </div>
    </div>
    <div class="form-actions">
        <button class="btn btn-primary" type="submit">@Resources.Common.SaveChanges</button>
    </div>
    @Html.AntiForgeryToken()
}

<script type="text/javascript">
    $(document).ready(function () {
        top.winsetup("@Html.Raw(Resources.Common.EditItem)", 700, 600, true);
    });
    function create_success() {
        top.$("#window").data("kendoWindow").close();
        top.$("#grid").data("kendoGrid").dataSource.read();
    }
    function thumbprocess(obj, target, noimg) {
        var state = $(obj).attr("state");
        var cthumb = $(obj).next().attr('url');
        if (state == '' || state == null) {
            $(obj).next().val('');
            $('#' + target).find('img').attr('src', noimg);
            $(obj).text("Khôi phục"); $(obj).attr("state", "1")
        } else {
            $(obj).text("Xóa");
            $('#' + target).find('img').attr('src', cthumb);
            $(obj).next().val(cthumb); $(obj).attr("state", "")
        }
    }
</script>